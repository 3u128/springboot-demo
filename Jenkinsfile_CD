pipeline {
    agent {
    	label 'linux_oci'
    }
//    environment {
//        SERVER_IP_DEV = credentials('ip-dev')
//        SERVER_IP_QA = credentials('ip-qa')
//        SERVER_IP_PROD = credentials('ip-prod')
//    }

    stages {
        stage('Deploy to dev') {
            when {
                expression { params.ENVIRONMENT == 'dev' }
            }
            steps {
                sshagent(['aws-free-tier-amzlinux']) {
                    sh '''
                        [ -d ~/.ssh ] || mkdir ~/.ssh && chmod 0700 ~/.ssh
                        ssh-keyscan -t rsa,dsa $IP_DEV >> ~/.ssh/known_hosts
                        scp -v stop-remove-start-docker-container.sh ec2-user@$IP_DEV:/home/ec2-user
                        ssh ec2-user@$IP_DEV 'sudo chmod +x ./stop-remove-start-docker-container.sh && ./stop-remove-start-docker-container.sh'
                    '''
                }
                sh 'echo test'
                sh 'sleep 10'
                sh 'curl --fail --connect-timeout 10 -m 25 http://$IP_DEV:8080 || exit 1'
            }
            post {
                success {
                    sh 'echo failed'
                    slackSend color: "good", message: "site is up"
                    }
                failure {
                    sh 'echo failed'
                    slackSend color: "danger", message: "site is down"
                }
            }
        }
        // stage('Deploy to qa') {
        //     when {
        //         expression { params.ENVIRONMENT = 'qa' }
        //     }
        //     steps {
        //         // sshagent(['aws-free-tier-amzlinux']) {
        //         //     sh '''
        //         //         [ -d ~/.ssh ] || mkdir ~/.ssh && chmod 0700 ~/.ssh
        //         //         ssh-keyscan -t rsa,dsa $SERVER_IP_QA >> ~/.ssh/known_hosts
        //         //         scp stop-remove-start-docker-container.sh ec2-user@$SERVER_IP_QA:/home/ec2-user
        //         //         ssh ec2-user@$SERVER_IP_QA 'sudo ./stop-remove-start-docker-container.sh'
        //         //     '''
        //         // }
        //         sh 'echo qa'
        //     }
        // }
        // stage('Deploy to prod') {
        //     when {
        //         expression { params.ENVIRONMENT = 'prod' }
        //     }
        //     steps {
        //         sh 'echo prod'
        //     }
        // }
    }
}
